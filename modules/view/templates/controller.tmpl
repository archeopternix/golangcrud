{{define "controller" -}}
// Generated code - do not modify it will be overwritten!!
// Time: {{.Model.TimeStamp}}
package controller

import (
	"github.com/labstack/echo"
	"net/http"
	"strconv"
	. "{{.App.Name}}/model"
)

// -------------------------------
// Handlers
// -------------------------------
{{with .Model}}
// list handler
func List{{plural .Name}}(c echo.Context) error {
	err, {{.Name | plural | lowercase}} := GetAll{{plural .Name}}()
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{plural .Name}} not found")
	}
	p:=NewPage("{{.Name | plural}}", "{{.Name | plural}}")
	p.Data = {{.Name | plural | lowercase}}
	return c.Render(http.StatusOK, "{{lowercase .Name}}list", p)
}

// get handler
func Get{{.Name}}(c echo.Context) error {
	id := c.Param("id")

	err, {{lowercase .Name}} := Get{{.Name}}ById(id)
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name}} with id:"+id+" not found")
	}
	{{$name := .Name}}
	{{range .Fields}}{{if eq .Type "parent"}}
	_, {{lowercase $name}}.{{.Name | plural}} = GetAll{{.Object | plural}}By{{$name}}Id(id)
	{{end}}{{end}}
	p:=NewPage("Edit {{.Name}}", "{{.Name | plural}}")
	p.Data = {{lowercase .Name}}	

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
}

// new handler
func New{{.Name}}(c echo.Context) error {
	{{lowercase .Name}} := new({{.Name}})
	
	p:=NewPage("New {{.Name}}", "{{.Name | plural}}")
	p.Data = {{lowercase .Name}}

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
}

// create handler
func Create{{.Name}}(c echo.Context) (err error) {
	{{lowercase .Name}} := new({{.Name}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name}} could not bound to params")
  	}

	p:=NewPage("Error {{.Name}}", "{{.Name | plural}}")
	p.Data = {{lowercase .Name}}
	
	if validate{{.Name}}(p) == false {
    	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
  	}
	
	{{lowercase .Name}}.Id = strconv.Itoa(NextId({{.Name | printf "%q"}}))
	err = Database.Insert({{lowercase .Name}})
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Database: {{.Name}} could not created")
	}
	
	return List{{plural .Name}}(c)
}

// update handler
func Update{{.Name}}(c echo.Context) (err error) {
	{{lowercase .Name}} := new({{.Name}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name}} could not bound to params")
  	}

	err = Database.Update({{lowercase .Name}})
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Database: {{.Name}} could not be updated")
	}

	return List{{plural .Name}}(c)
}

// delete handler
func Delete{{.Name}}(c echo.Context) error {
	id := c.Param("id")
	err, {{lowercase .Name}} := Get{{.Name}}ById(id)
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name}} with id:"+id+" not found")
	}
	err = Database.Delete({{lowercase .Name}})
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Database: {{.Name}} could not be deleted")
	}
	
	return List{{plural .Name}}(c)
}

// generic validation handler for form
func validate{{.Name}}(p *Page) bool{
	return true // ToDo: custom validation
	/*
	p.Errors = make(map[string]string)
	data := p.Data.(*{{.Name}})
	{{range .Fields}}
	{{- if eq .Type "string" "email" "tel" "text" "password"}} if (data.{{.Name}} != "") {		
		p.Errors["{{.Name}}"]="Please correct error!"	
	}
	{{else if eq .Type "bool"}} if (data.{{.Name}} != true) {		
		p.Errors["{{.Name}}"]="Please correct error!"
	}
	{{end}}{{end}}
	return len(p.Errors) == 0
	*/
}
{{end}}{{end}}