{{define "controller" -}}
// Generated code - do not modify it will be overwritten!!
// Time: {{.Entity.TimeStamp}}
package view

import (
	"github.com/labstack/echo/v4"
	"net/http"

	. "{{.AppName}}/model"
)

{{with .Entity}}

// -------------------------------
// Handlers
// -------------------------------
// List{{plural .Name}} 
func (s Server) List{{plural .Name}}(c echo.Context) error {
	{{.Name | plural | lowercase}},err := s.Env.{{.Name | plural}}.GetAll()
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{plural .Name}} not found")
	}
	p:=NewPage("{{.Name | plural}}", "{{.Name | plural}}")
	p.Data = {{.Name | plural | lowercase}}
	return c.Render(http.StatusOK, "{{lowercase .Name}}list", p)
}

// get handler
func (s Server) Get{{.Name}}(c echo.Context) error {
	id := c.Param("id")
	
	{{lowercase .Name}}, err := s.Env.{{.Name | plural}}.Get(asUint(id))
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name}} with id:"+id+" not found")
	}
	{{- $name := .Name}}
	{{range .Fields}}{{if eq .Kind "Parent"}}
	{{lowercase $name}}.{{.Name | plural}},_ = s.Env.{{.Name | plural}}.GetAll{{.Object | plural}}By{{$name}}Id(asUint(id))
	{{- end}}{{end}}
	p:=NewPage("Edit {{.Name}}", "{{.Name | plural}}")
	p.Data = {{lowercase .Name}}	

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
}

// new handler
func (s Server) New{{.Name}}(c echo.Context) error {
	{{lowercase .Name}} := new({{.Name}})
	
	p:=NewPage("New {{.Name}}", "{{.Name | plural}}")
	p.Data = {{lowercase .Name}}

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
}

// create handler
func (s Server) Create{{.Name}}(c echo.Context) (err error) {
	{{lowercase .Name}} := new({{.Name}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name}} could not bound to params")
  	}

	p:=NewPage("Error {{.Name}}", "{{.Name | plural}}")
	p.Data = {{lowercase .Name}}
	
	if s.validate{{.Name}}(p) == false {
    	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
  	}
	

	err = s.Env.{{.Name | plural}}.UpdateOrInsert({{lowercase .Name}})
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Database: {{.Name}} could not created")
	}
	
	return s.List{{plural .Name}}(c)
}

// update handler
func (s Server) Update{{.Name}}(c echo.Context) (err error) {
	{{lowercase .Name}} := new({{.Name}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name}} could not bound to params")
  	}

	err = s.Env.{{.Name | plural}}.UpdateOrInsert({{lowercase .Name}})
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Database: {{.Name}} could not be updated")
	}

	return s.List{{plural .Name}}(c)
}

// delete handler
func (s Server) Delete{{.Name}}(c echo.Context) error {
	id := c.Param("id")
	{{lowercase .Name}},err := s.Env.{{.Name | plural}}.Get(asUint(id))
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name}} with id:"+id+" not found")
	}
	err = s.Env.{{.Name | plural}}.Delete({{lowercase .Name}})
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Database: {{.Name}} could not be deleted")
	}
	
	return s.List{{plural .Name}}(c)
}

// generic validation handler for form
func (s Server) validate{{.Name}}(p *Page) bool{
	return true // ToDo: custom validation
	/*
	p.Errors = make(map[string]string)
	data := p.Data.(*{{.Name}})
	{{range .Fields}}
	{{- if eq .Kind "Longtext" "Email" "Tel" "Text" "Password"}} if (data.{{.Name}} != "") {		
		p.Errors["{{.Name}}"]="Please correct error!"	
	}
	{{else if eq .Kind "Boolean"}} if (data.{{.Name}} != true) {		
		p.Errors["{{.Name}}"]="Please correct error!"
	}
	{{end}}{{end}}
	return len(p.Errors) == 0
	*/
}
{{end}}
{{end}}